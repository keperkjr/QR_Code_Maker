@model QR_Code_Maker.Models.QRCode

@{
    ViewData["Title"] = "Create";
}

<div class="text-center">
    <div style="width: 60%; margin: auto;">
        <form asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group row" style="justify-content: center; margin-bottom: 0;">
                <label asp-for="text" class="col-form-label">Enter your website url or text here</label>
                <div class="col-sm-10" style="padding-left: 0">
                    <input asp-for="text" type="text" class="form-control" placeholder="http://" autocomplete="off">
                    <span asp-validation-for="text" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group" style="justify-content: center;">
                <label for="size" class="col-form-label">Size</label>
                <div>
                    <input asp-for="size" type="range" min="50" max="1000" value="@(Model != null ? $"{Model.size}" : "200")" step="25">
                    <div id="sliderOutput"></div>
                </div>
            </div>

            <div class="form-group row">
                <button type="submit" class="btn btn-primary btn-lg btn-block">Create QR Code</button>
            </div>
        </form>
    </div>

    @if (Model != null && Model.text != null)
    {
        <div>
            <h4>Result</h4>
            <div id="resultInfo" class="text-danger"></div>
            <hr />
            <div>            
                <button type="button" class="btn btn-info btn-lg"
                    onclick="location.href='@Url.Action("Download", "Create", new { text = Model.text, size = Model.size })'"
                    >Download</button>
            </div>
            <div style="margin-top: 10px;">
                <div>
                    @($"{Model.size} x {Model.size} Px")
                </div>
                @await Component.InvokeAsync(nameof(QR_Code_Maker.ViewComponents.QRCodeViewer), new { text = Model.text, size = Model.size })
            </div>
        </div>
    }
</div>


<script>
    document.addEventListener("DOMContentLoaded", function (event) {
        let slider = document.querySelector("#size");
        let sliderOutput = document.querySelector("#sliderOutput");
        let resultInfo = document.querySelector("#resultInfo");
        let text = document.querySelector("#text");

        updateSliderSize(slider, sliderOutput);

        slider.addEventListener("input", (e) => {
            updateSliderSize(slider, sliderOutput);
            setUpdateRequiredText(resultInfo);
        });

        text.addEventListener("keyup", (e) => {
            setUpdateRequiredText(resultInfo);
        });
    });

    function setUpdateRequiredText(resultInfo) {
        if (!resultInfo) {
            return;
        }
        resultInfo.innerHTML = "Settings have changed.<br />Click 'Create QR Code' to see updated results";
    }

    function updateSliderSize(slider, sliderOutput) {
        sliderOutput.innerHTML = `${slider.value} x ${slider.value} Px`;
    }
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
